//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.16613
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.ApplicationServer.Http {
    
    
    internal partial class SR {
        
        static System.Resources.ResourceManager resourceManager;
        
        static System.Globalization.CultureInfo resourceCulture;
        
        private SR() {
        }
        
        internal static System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceManager, null)) {
                    System.Resources.ResourceManager temp = new System.Resources.ResourceManager("Microsoft.ApplicationServer.Http.SR", typeof(SR).Assembly);
                    resourceManager = temp;
                }
                return resourceManager;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("StrictResXFileCodeGenerator", "4.0.0.0")]
        internal static System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>Gets localized string like: HTTP request message body with an undetermined content length.</summary>
        internal static string MessageBodyIsHttpRequestMessageWithUnknownContentLength {
            get {
                return ResourceManager.GetString("MessageBodyIsHttpRequestMessageWithUnknownContentLength", Culture);
            }
        }
        
        /// <summary>Gets localized string like: HTTP response message body with an undetermined content length.</summary>
        internal static string MessageBodyIsHttpResponseMessageWithUnknownContentLength {
            get {
                return ResourceManager.GetString("MessageBodyIsHttpResponseMessageWithUnknownContentLength", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Message is closed.</summary>
        internal static string MessageClosed {
            get {
                return ResourceManager.GetString("MessageClosed", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The incoming message does not have the required 'To' header.</summary>
        internal static string RequestMissingToHeader {
            get {
                return ResourceManager.GetString("RequestMissingToHeader", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Service</summary>
        internal static string HtmlPageTitleText {
            get {
                return ResourceManager.GetString("HtmlPageTitleText", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Method not allowed.</summary>
        internal static string HtmlPageMethodNotAllowed {
            get {
                return ResourceManager.GetString("HtmlPageMethodNotAllowed", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Request Error</summary>
        internal static string HtmlPageRequestErrorTitle {
            get {
                return ResourceManager.GetString("HtmlPageRequestErrorTitle", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The server encountered an error processing the request. See server logs for more details.</summary>
        internal static string HtmlPageServerErrorProcessingRequest {
            get {
                return ResourceManager.GetString("HtmlPageServerErrorProcessingRequest", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Endpoint not found.</summary>
        internal static string HtmlPageEndpointNotFound {
            get {
                return ResourceManager.GetString("HtmlPageEndpointNotFound", Culture);
            }
        }
        
        /// <summary>Gets localized string like: <Name Unknown></summary>
        internal static string UnknownName {
            get {
                return ResourceManager.GetString("UnknownName", Culture);
            }
        }
        
        /// <summary>Gets localized string like: This element contains text.</summary>
        internal static string HelpExampleGeneratorThisElementContainsText {
            get {
                return ResourceManager.GetString("HelpExampleGeneratorThisElementContainsText", Culture);
            }
        }
        
        /// <summary>Gets localized string like: String content</summary>
        internal static string HelpExampleGeneratorStringContent {
            get {
                return ResourceManager.GetString("HelpExampleGeneratorStringContent", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Could not generate schema document.</summary>
        internal static string HelpPageCouldNotGenerateSchema {
            get {
                return ResourceManager.GetString("HelpPageCouldNotGenerateSchema", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Example</summary>
        internal static string HelpPageExample {
            get {
                return ResourceManager.GetString("HelpPageExample", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Format</summary>
        internal static string HelpPageFormat {
            get {
                return ResourceManager.GetString("HelpPageFormat", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Body</summary>
        internal static string HelpPageBody {
            get {
                return ResourceManager.GetString("HelpPageBody", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Message direction</summary>
        internal static string HelpPageMessageDirection {
            get {
                return ResourceManager.GetString("HelpPageMessageDirection", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Request</summary>
        internal static string HelpPageRequest {
            get {
                return ResourceManager.GetString("HelpPageRequest", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Response</summary>
        internal static string HelpPageResponse {
            get {
                return ResourceManager.GetString("HelpPageResponse", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Schema</summary>
        internal static string HelpPageSchema {
            get {
                return ResourceManager.GetString("HelpPageSchema", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Help Page is not supported for WebScript endpoints.</summary>
        internal static string HelpPageNotSupportedInScripts {
            get {
                return ResourceManager.GetString("HelpPageNotSupportedInScripts", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Method not allowed.</summary>
        internal static string HelpPageMethodNotAllowed {
            get {
                return ResourceManager.GetString("HelpPageMethodNotAllowed", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Endpoint not found.</summary>
        internal static string HelpPageEndpointNotFound {
            get {
                return ResourceManager.GetString("HelpPageEndpointNotFound", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Service</summary>
        internal static string HelpPageTitleText {
            get {
                return ResourceManager.GetString("HelpPageTitleText", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Request Error</summary>
        internal static string HelpPageRequestErrorTitle {
            get {
                return ResourceManager.GetString("HelpPageRequestErrorTitle", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The server encountered an error processing the request. See server logs for more details.</summary>
        internal static string HelpServerErrorProcessingRequest {
            get {
                return ResourceManager.GetString("HelpServerErrorProcessingRequest", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Unknown</summary>
        internal static string HelpPageUnknown {
            get {
                return ResourceManager.GetString("HelpPageUnknown", Culture);
            }
        }
        
        /// <summary>Gets localized string like: en-us</summary>
        internal static string HelpExampleGeneratorLanguage {
            get {
                return ResourceManager.GetString("HelpExampleGeneratorLanguage", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Description</summary>
        internal static string HelpPageDescription {
            get {
                return ResourceManager.GetString("HelpPageDescription", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Method</summary>
        internal static string HelpPageMethod {
            get {
                return ResourceManager.GetString("HelpPageMethod", Culture);
            }
        }
        
        /// <summary>Gets localized string like: This page describes the service operations at this endpoint.</summary>
        internal static string HelpPageStaticText {
            get {
                return ResourceManager.GetString("HelpPageStaticText", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Uri</summary>
        internal static string HelpPageUri {
            get {
                return ResourceManager.GetString("HelpPageUri", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The following is an example request Xml body:</summary>
        internal static string HelpPageXmlRequest {
            get {
                return ResourceManager.GetString("HelpPageXmlRequest", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The following is an example request Json body:</summary>
        internal static string HelpPageJsonRequest {
            get {
                return ResourceManager.GetString("HelpPageJsonRequest", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The following is an example response Xml body:</summary>
        internal static string HelpPageXmlResponse {
            get {
                return ResourceManager.GetString("HelpPageXmlResponse", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The following is an example response Json body:</summary>
        internal static string HelpPageJsonResponse {
            get {
                return ResourceManager.GetString("HelpPageJsonResponse", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The following is the request Xml Schema:</summary>
        internal static string HelpPageRequestSchema {
            get {
                return ResourceManager.GetString("HelpPageRequestSchema", Culture);
            }
        }
        
        /// <summary>Gets localized string like: The following is the response Xml Schema:</summary>
        internal static string HelpPageResponseSchema {
            get {
                return ResourceManager.GetString("HelpPageResponseSchema", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Additional request Xml Schemas:</summary>
        internal static string HelpPageAdditionalRequestSchema {
            get {
                return ResourceManager.GetString("HelpPageAdditionalRequestSchema", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Additional response Xml Schemas:</summary>
        internal static string HelpPageAdditionalResponseSchema {
            get {
                return ResourceManager.GetString("HelpPageAdditionalResponseSchema", Culture);
            }
        }
        
        /// <summary>Gets localized string like: N/A</summary>
        internal static string HelpPageNA {
            get {
                return ResourceManager.GetString("HelpPageNA", Culture);
            }
        }
        
        /// <summary>Gets localized string like: Failed to create error response message</summary>
        internal static string HelpPageFailedToCreateErrorMessage {
            get {
                return ResourceManager.GetString("HelpPageFailedToCreateErrorMessage", Culture);
            }
        }
        
        /// <summary>Gets localized string like: 'undefined'</summary>
        internal static string UndefinedMediaType {
            get {
                return ResourceManager.GetString("UndefinedMediaType", Culture);
            }
        }
        
        /// <summary>Gets localized string like: HTTP request message body with a content length of '{0}' bytes.</summary>
        /// <param name="param0">Parameter 0 for string: HTTP request message body with a content length of '{0}' bytes.</param>
        internal static string MessageBodyIsHttpRequestMessageWithKnownContentLength(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessageBodyIsHttpRequestMessageWithKnownContentLength", Culture), param0);
        }
        
        /// <summary>Gets localized string like: HTTP response message body with a content length of '{0}' bytes.</summary>
        /// <param name="param0">Parameter 0 for string: HTTP response message body with a content length of '{0}' bytes.</param>
        internal static string MessageBodyIsHttpResponseMessageWithKnownContentLength(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MessageBodyIsHttpResponseMessageWithKnownContentLength", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The message instance does not support being read, written out or copied.  Use the '{0}' or '{1}' extension methods on the '{2}' class to access the message content.</summary>
        /// <param name="param0">Parameter 0 for string: The message instance does not support being read, written out or copied.  Use the '{0}' or '{1}' extension methods on the '{2}' class to access the message content.</param>
        /// <param name="param1">Parameter 1 for string: The message instance does not support being read, written out or copied.  Use the '{0}' or '{1}' extension methods on the '{2}' class to access the message content.</param>
        /// <param name="param2">Parameter 2 for string: The message instance does not support being read, written out or copied.  Use the '{0}' or '{1}' extension methods on the '{2}' class to access the message content.</param>
        internal static string MessageReadWriteCopyNotSupported(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("MessageReadWriteCopyNotSupported", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The '{0}' type supports only MessageVersion.None. </summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' type supports only MessageVersion.None. </param>
        internal static string OnlyMessageVersionNoneSupportedOnHttpMessageEncodingBindingElement(object param0) {
            return string.Format(Culture, ResourceManager.GetString("OnlyMessageVersionNoneSupportedOnHttpMessageEncodingBindingElement", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The '{0}' type does not support building ChannelFactory instances.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' type does not support building ChannelFactory instances.</param>
        internal static string ChannelFactoryNotSupportedByHttpMessageEncodingBindingElement(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ChannelFactoryNotSupportedByHttpMessageEncodingBindingElement", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The '{0}' type does not support the '{0}' channel shape.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' type does not support the '{0}' channel shape.</param>
        internal static string ChannelShapeNotSupportedByHttpMessageEncodingBindingElement(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ChannelShapeNotSupportedByHttpMessageEncodingBindingElement", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The message version of the outgoing message ({0}) does not match that of the encoder ({1}). Make sure the binding is configured with the same version as the message.</summary>
        /// <param name="param0">Parameter 0 for string: The message version of the outgoing message ({0}) does not match that of the encoder ({1}). Make sure the binding is configured with the same version as the message.</param>
        /// <param name="param1">Parameter 1 for string: The message version of the outgoing message ({0}) does not match that of the encoder ({1}). Make sure the binding is configured with the same version as the message.</param>
        internal static string EncoderMessageVersionMismatch(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("EncoderMessageVersionMismatch", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The response message is not valid for the encoder used by the '{0}' binding, which requires that the response message have been created with the '{1}' extension method on the '{2}' class.</summary>
        /// <param name="param0">Parameter 0 for string: The response message is not valid for the encoder used by the '{0}' binding, which requires that the response message have been created with the '{1}' extension method on the '{2}' class.</param>
        /// <param name="param1">Parameter 1 for string: The response message is not valid for the encoder used by the '{0}' binding, which requires that the response message have been created with the '{1}' extension method on the '{2}' class.</param>
        /// <param name="param2">Parameter 2 for string: The response message is not valid for the encoder used by the '{0}' binding, which requires that the response message have been created with the '{1}' extension method on the '{2}' class.</param>
        internal static string MessageInvalidForHttpMessageEncoder(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("MessageInvalidForHttpMessageEncoder", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The value of the '{0}' parameter must be less than or equal to the value of the '{1}' parameter.</summary>
        /// <param name="param0">Parameter 0 for string: The value of the '{0}' parameter must be less than or equal to the value of the '{1}' parameter.</param>
        /// <param name="param1">Parameter 1 for string: The value of the '{0}' parameter must be less than or equal to the value of the '{1}' parameter.</param>
        internal static string ParameterMustBeLessThanOrEqualSecondParameter(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ParameterMustBeLessThanOrEqualSecondParameter", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The '{0}' type does not support a session encoder.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' type does not support a session encoder.</param>
        internal static string HttpMessageEncoderFactoryDoesNotSupportSessionEncoder(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageEncoderFactoryDoesNotSupportSessionEncoder", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The message instance is non-empty but the '{0}' extension method on the '{1}' class returned null.  Message instances that do not support the '{0}' extension method must be empty. </summary>
        /// <param name="param0">Parameter 0 for string: The message instance is non-empty but the '{0}' extension method on the '{1}' class returned null.  Message instances that do not support the '{0}' extension method must be empty. </param>
        /// <param name="param1">Parameter 1 for string: The message instance is non-empty but the '{0}' extension method on the '{1}' class returned null.  Message instances that do not support the '{0}' extension method must be empty. </param>
        internal static string NonHttpMessageMustBeEmpty(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("NonHttpMessageMustBeEmpty", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The incoming message does not have the required '{0}' property of type '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: The incoming message does not have the required '{0}' property of type '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: The incoming message does not have the required '{0}' property of type '{1}'.</param>
        internal static string RequestMissingHttpRequestMessageProperty(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("RequestMissingHttpRequestMessageProperty", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Invalid type: '{0}'. It must inherit from base type '{1}', cannot be abstract, and must expose a public constructor taking a single argument of type '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: Invalid type: '{0}'. It must inherit from base type '{1}', cannot be abstract, and must expose a public constructor taking a single argument of type '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: Invalid type: '{0}'. It must inherit from base type '{1}', cannot be abstract, and must expose a public constructor taking a single argument of type '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: Invalid type: '{0}'. It must inherit from base type '{1}', cannot be abstract, and must expose a public constructor taking a single argument of type '{2}'.</param>
        internal static string HttpMessageHandlerTypeNotSupported(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageHandlerTypeNotSupported", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Invalid channel type '{0}'. The channel must implement '{2}' to be supported by '{1}' and the inner channel must be able to build a channel of type '{2}' as well.</summary>
        /// <param name="param0">Parameter 0 for string: Invalid channel type '{0}'. The channel must implement '{2}' to be supported by '{1}' and the inner channel must be able to build a channel of type '{2}' as well.</param>
        /// <param name="param1">Parameter 1 for string: Invalid channel type '{0}'. The channel must implement '{2}' to be supported by '{1}' and the inner channel must be able to build a channel of type '{2}' as well.</param>
        /// <param name="param2">Parameter 2 for string: Invalid channel type '{0}'. The channel must implement '{2}' to be supported by '{1}' and the inner channel must be able to build a channel of type '{2}' as well.</param>
        internal static string HttpMessageHandlerChannelInvalidChannelShape(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageHandlerChannelInvalidChannelShape", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The '{0}' binding element does not support building an '{1}' instance.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' binding element does not support building an '{1}' instance.</param>
        /// <param name="param1">Parameter 1 for string: The '{0}' binding element does not support building an '{1}' instance.</param>
        internal static string HttpMessageHandlerChannelFactoryNotSupported(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageHandlerChannelFactoryNotSupported", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Could not obtain an HTTP request from message of type '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: Could not obtain an HTTP request from message of type '{0}'.</param>
        internal static string HttpMessageHandlerInvalidMessage(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageHandlerInvalidMessage", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The '{0}' for this endpoint indicates that responses should be sent asynchronously but the '{1}' channel received a synchronous response. Please correct this discrepancy either by setting the behavior to be synchronous or use the asynchronous reply path for sending responses.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' for this endpoint indicates that responses should be sent asynchronously but the '{1}' channel received a synchronous response. Please correct this discrepancy either by setting the behavior to be synchronous or use the asynchronous reply path for sending responses.</param>
        /// <param name="param1">Parameter 1 for string: The '{0}' for this endpoint indicates that responses should be sent asynchronously but the '{1}' channel received a synchronous response. Please correct this discrepancy either by setting the behavior to be synchronous or use the asynchronous reply path for sending responses.</param>
        internal static string HttpMessageHandlerRequestContextReplyPathMismatch1(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageHandlerRequestContextReplyPathMismatch1", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The '{0}' for this endpoint indicates that responses should be sent synchronously but the '{1}' channel received an asynchronous response. Please correct this discrepancy either by setting the behavior to be asynchronous or use the synchronous reply path for sending responses.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' for this endpoint indicates that responses should be sent synchronously but the '{1}' channel received an asynchronous response. Please correct this discrepancy either by setting the behavior to be asynchronous or use the synchronous reply path for sending responses.</param>
        /// <param name="param1">Parameter 1 for string: The '{0}' for this endpoint indicates that responses should be sent synchronously but the '{1}' channel received an asynchronous response. Please correct this discrepancy either by setting the behavior to be asynchronous or use the synchronous reply path for sending responses.</param>
        internal static string HttpMessageHandlerRequestContextReplyPathMismatch2(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageHandlerRequestContextReplyPathMismatch2", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The '{1}' binding does not have a configured binding named '{0}'.</summary>
        /// <param name="param0">Parameter 0 for string: The '{1}' binding does not have a configured binding named '{0}'.</param>
        /// <param name="param1">Parameter 1 for string: The '{1}' binding does not have a configured binding named '{0}'.</param>
        internal static string ConfigInvalidBindingConfigurationName(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ConfigInvalidBindingConfigurationName", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: <p>Method not allowed. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service.</p></summary>
        /// <param name="param0">Parameter 0 for string: <p>Method not allowed. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service.</p></param>
        internal static string HtmlPageMethodNotAllowedWithLink(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HtmlPageMethodNotAllowedWithLink", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The server encountered an error processing the request. The exception message is '{0}'. See server logs for more details. The exception stack trace is: </summary>
        /// <param name="param0">Parameter 0 for string: The server encountered an error processing the request. The exception message is '{0}'. See server logs for more details. The exception stack trace is: </param>
        internal static string HtmlPageServerErrorProcessingRequestWithDetails(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HtmlPageServerErrorProcessingRequestWithDetails", Culture), param0);
        }
        
        /// <summary>Gets localized string like: <p>The server encountered an error processing the request. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service. The exception message is '{1}'. See server logs for more details. The exception stack trace is: </p></summary>
        /// <param name="param0">Parameter 0 for string: <p>The server encountered an error processing the request. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service. The exception message is '{1}'. See server logs for more details. The exception stack trace is: </p></param>
        /// <param name="param1">Parameter 1 for string: <p>The server encountered an error processing the request. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service. The exception message is '{1}'. See server logs for more details. The exception stack trace is: </p></param>
        internal static string HtmlPageServerErrorProcessingRequestWithDetailsAndLink(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HtmlPageServerErrorProcessingRequestWithDetailsAndLink", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: <p>The server encountered an error processing the request. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service.</p></summary>
        /// <param name="param0">Parameter 0 for string: <p>The server encountered an error processing the request. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service.</p></param>
        internal static string HtmlPageServerErrorProcessingRequestWithLink(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HtmlPageServerErrorProcessingRequestWithLink", Culture), param0);
        }
        
        /// <summary>Gets localized string like: <p>Endpoint not found. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service.</p></summary>
        /// <param name="param0">Parameter 0 for string: <p>Endpoint not found. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service.</p></param>
        internal static string HtmlPageEndpointNotFoundWithLink(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HtmlPageEndpointNotFoundWithLink", Culture), param0);
        }
        
        /// <summary>Gets localized string like: <p>There is no operation listening for <a href="{0}">{0}</a>, but there is an operation listening for <a href="{1}">{1}</a>, so you are being redirected there.</p></summary>
        /// <param name="param0">Parameter 0 for string: <p>There is no operation listening for <a href="{0}">{0}</a>, but there is an operation listening for <a href="{1}">{1}</a>, so you are being redirected there.</p></param>
        /// <param name="param1">Parameter 1 for string: <p>There is no operation listening for <a href="{0}">{0}</a>, but there is an operation listening for <a href="{1}">{1}</a>, so you are being redirected there.</p></param>
        internal static string HtmlPageRedirect(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HtmlPageRedirect", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The inspector of type '{0}' received a null '{1}' in '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: The inspector of type '{0}' received a null '{1}' in '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: The inspector of type '{0}' received a null '{1}' in '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: The inspector of type '{0}' received a null '{1}' in '{2}'.</param>
        internal static string HttpMessageInspectorNullMessage(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageInspectorNullMessage", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: No '{0}' is available.</summary>
        /// <param name="param0">Parameter 0 for string: No '{0}' is available.</param>
        internal static string HttpOperationDescriptionNullOperationDescription(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HttpOperationDescriptionNullOperationDescription", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The '{0}' property cannot be modified on the associated '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' property cannot be modified on the associated '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: The '{0}' property cannot be modified on the associated '{1}'.</param>
        internal static string HttpDescriptionPropertyImmutable(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HttpDescriptionPropertyImmutable", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The error handler of type '{0}' received a null '{1}' in '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: The error handler of type '{0}' received a null '{1}' in '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: The error handler of type '{0}' received a null '{1}' in '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: The error handler of type '{0}' received a null '{1}' in '{2}'.</param>
        internal static string HttpErrorMessageNullResponse(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("HttpErrorMessageNullResponse", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The instance provider of type '{0}' received a null '{1}' in '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: The instance provider of type '{0}' received a null '{1}' in '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: The instance provider of type '{0}' received a null '{1}' in '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: The instance provider of type '{0}' received a null '{1}' in '{2}'.</param>
        internal static string HttpInstanceProviderNullRequest(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("HttpInstanceProviderNullRequest", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The operation selector of type '{0}' selected a null operation.</summary>
        /// <param name="param0">Parameter 0 for string: The operation selector of type '{0}' selected a null operation.</param>
        internal static string HttpOperationSelectorNullOperation(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HttpOperationSelectorNullOperation", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The operation selector of type '{0}' received a null '{1}' in '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: The operation selector of type '{0}' received a null '{1}' in '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: The operation selector of type '{0}' received a null '{1}' in '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: The operation selector of type '{0}' received a null '{1}' in '{2}'.</param>
        internal static string HttpOperationSelectorNullRequest(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("HttpOperationSelectorNullRequest", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The formatter of type '{0}' only supports bindings that ensure the message version is '{1}.{2}'</summary>
        /// <param name="param0">Parameter 0 for string: The formatter of type '{0}' only supports bindings that ensure the message version is '{1}.{2}'</param>
        /// <param name="param1">Parameter 1 for string: The formatter of type '{0}' only supports bindings that ensure the message version is '{1}.{2}'</param>
        /// <param name="param2">Parameter 2 for string: The formatter of type '{0}' only supports bindings that ensure the message version is '{1}.{2}'</param>
        internal static string HttpMessageFormatterMessageVersion(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageFormatterMessageVersion", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The formatter of type '{0}' received a null '{1}' in '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: The formatter of type '{0}' received a null '{1}' in '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: The formatter of type '{0}' received a null '{1}' in '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: The formatter of type '{0}' received a null '{1}' in '{2}'.</param>
        internal static string HttpMessageFormatterNullMessage(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageFormatterNullMessage", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Unable to determine the type of the content because the type '{0}' has two or more type parameters.</summary>
        /// <param name="param0">Parameter 0 for string: Unable to determine the type of the content because the type '{0}' has two or more type parameters.</param>
        internal static string MultipleTypeParametersForHttpContentType(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MultipleTypeParametersForHttpContentType", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {0} '{1}' of service operation '{2}' returned a collection from the method '{3}' that had a null value at index '{4}'.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} '{1}' of service operation '{2}' returned a collection from the method '{3}' that had a null value at index '{4}'.</param>
        /// <param name="param1">Parameter 1 for string: The {0} '{1}' of service operation '{2}' returned a collection from the method '{3}' that had a null value at index '{4}'.</param>
        /// <param name="param2">Parameter 2 for string: The {0} '{1}' of service operation '{2}' returned a collection from the method '{3}' that had a null value at index '{4}'.</param>
        /// <param name="param3">Parameter 3 for string: The {0} '{1}' of service operation '{2}' returned a collection from the method '{3}' that had a null value at index '{4}'.</param>
        /// <param name="param4">Parameter 4 for string: The {0} '{1}' of service operation '{2}' returned a collection from the method '{3}' that had a null value at index '{4}'.</param>
        internal static string NullValueInArrayParameterFromGetParameters(object param0, object param1, object param2, object param3, object param4) {
            return string.Format(Culture, ResourceManager.GetString("NullValueInArrayParameterFromGetParameters", Culture), param0, param1, param2, param3, param4);
        }
        
        /// <summary>Gets localized string like: The {0} '{1}' of service operation '{2}' expected '{3}' values but received '{4}' values.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} '{1}' of service operation '{2}' expected '{3}' values but received '{4}' values.</param>
        /// <param name="param1">Parameter 1 for string: The {0} '{1}' of service operation '{2}' expected '{3}' values but received '{4}' values.</param>
        /// <param name="param2">Parameter 2 for string: The {0} '{1}' of service operation '{2}' expected '{3}' values but received '{4}' values.</param>
        /// <param name="param3">Parameter 3 for string: The {0} '{1}' of service operation '{2}' expected '{3}' values but received '{4}' values.</param>
        /// <param name="param4">Parameter 4 for string: The {0} '{1}' of service operation '{2}' expected '{3}' values but received '{4}' values.</param>
        internal static string HttpOperationHandlerReceivedWrongNumberOfValues(object param0, object param1, object param2, object param3, object param4) {
            return string.Format(Culture, ResourceManager.GetString("HttpOperationHandlerReceivedWrongNumberOfValues", Culture), param0, param1, param2, param3, param4);
        }
        
        /// <summary>Gets localized string like: The {0} '{1}' of service operation '{2}' was expected to return '{3}' values but returned '{4}' values.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} '{1}' of service operation '{2}' was expected to return '{3}' values but returned '{4}' values.</param>
        /// <param name="param1">Parameter 1 for string: The {0} '{1}' of service operation '{2}' was expected to return '{3}' values but returned '{4}' values.</param>
        /// <param name="param2">Parameter 2 for string: The {0} '{1}' of service operation '{2}' was expected to return '{3}' values but returned '{4}' values.</param>
        /// <param name="param3">Parameter 3 for string: The {0} '{1}' of service operation '{2}' was expected to return '{3}' values but returned '{4}' values.</param>
        /// <param name="param4">Parameter 4 for string: The {0} '{1}' of service operation '{2}' was expected to return '{3}' values but returned '{4}' values.</param>
        internal static string HttpOperationHandlerProducedWrongNumberOfValues(object param0, object param1, object param2, object param3, object param4) {
            return string.Format(Culture, ResourceManager.GetString("HttpOperationHandlerProducedWrongNumberOfValues", Culture), param0, param1, param2, param3, param4);
        }
        
        /// <summary>Gets localized string like: The {0} '{1}' of service operation '{2}' expected a value assignable to type '{3}' for input parameter '{4}' but received a value of type '{5}'.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} '{1}' of service operation '{2}' expected a value assignable to type '{3}' for input parameter '{4}' but received a value of type '{5}'.</param>
        /// <param name="param1">Parameter 1 for string: The {0} '{1}' of service operation '{2}' expected a value assignable to type '{3}' for input parameter '{4}' but received a value of type '{5}'.</param>
        /// <param name="param2">Parameter 2 for string: The {0} '{1}' of service operation '{2}' expected a value assignable to type '{3}' for input parameter '{4}' but received a value of type '{5}'.</param>
        /// <param name="param3">Parameter 3 for string: The {0} '{1}' of service operation '{2}' expected a value assignable to type '{3}' for input parameter '{4}' but received a value of type '{5}'.</param>
        /// <param name="param4">Parameter 4 for string: The {0} '{1}' of service operation '{2}' expected a value assignable to type '{3}' for input parameter '{4}' but received a value of type '{5}'.</param>
        /// <param name="param5">Parameter 5 for string: The {0} '{1}' of service operation '{2}' expected a value assignable to type '{3}' for input parameter '{4}' but received a value of type '{5}'.</param>
        internal static string HttpOperationHandlerReceivedWrongType(object param0, object param1, object param2, object param3, object param4, object param5) {
            return string.Format(Culture, ResourceManager.GetString("HttpOperationHandlerReceivedWrongType", Culture), param0, param1, param2, param3, param4, param5);
        }
        
        /// <summary>Gets localized string like: The {0} '{1}' of service operation '{2}' was expected to return a value of type '{3}' assignable to the '{4}' output parameter but returned a value of type '{5}'.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} '{1}' of service operation '{2}' was expected to return a value of type '{3}' assignable to the '{4}' output parameter but returned a value of type '{5}'.</param>
        /// <param name="param1">Parameter 1 for string: The {0} '{1}' of service operation '{2}' was expected to return a value of type '{3}' assignable to the '{4}' output parameter but returned a value of type '{5}'.</param>
        /// <param name="param2">Parameter 2 for string: The {0} '{1}' of service operation '{2}' was expected to return a value of type '{3}' assignable to the '{4}' output parameter but returned a value of type '{5}'.</param>
        /// <param name="param3">Parameter 3 for string: The {0} '{1}' of service operation '{2}' was expected to return a value of type '{3}' assignable to the '{4}' output parameter but returned a value of type '{5}'.</param>
        /// <param name="param4">Parameter 4 for string: The {0} '{1}' of service operation '{2}' was expected to return a value of type '{3}' assignable to the '{4}' output parameter but returned a value of type '{5}'.</param>
        /// <param name="param5">Parameter 5 for string: The {0} '{1}' of service operation '{2}' was expected to return a value of type '{3}' assignable to the '{4}' output parameter but returned a value of type '{5}'.</param>
        internal static string HttpOperationHandlerProducedWrongType(object param0, object param1, object param2, object param3, object param4, object param5) {
            return string.Format(Culture, ResourceManager.GetString("HttpOperationHandlerProducedWrongType", Culture), param0, param1, param2, param3, param4, param5);
        }
        
        /// <summary>Gets localized string like: The {0} '{1}' of service operation '{2}' expected a string value that could be parsed as a '{3}' for input parameter '{4}' but the parsing failed with the message: {5} See the inner exception for more details.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} '{1}' of service operation '{2}' expected a string value that could be parsed as a '{3}' for input parameter '{4}' but the parsing failed with the message: {5} See the inner exception for more details.</param>
        /// <param name="param1">Parameter 1 for string: The {0} '{1}' of service operation '{2}' expected a string value that could be parsed as a '{3}' for input parameter '{4}' but the parsing failed with the message: {5} See the inner exception for more details.</param>
        /// <param name="param2">Parameter 2 for string: The {0} '{1}' of service operation '{2}' expected a string value that could be parsed as a '{3}' for input parameter '{4}' but the parsing failed with the message: {5} See the inner exception for more details.</param>
        /// <param name="param3">Parameter 3 for string: The {0} '{1}' of service operation '{2}' expected a string value that could be parsed as a '{3}' for input parameter '{4}' but the parsing failed with the message: {5} See the inner exception for more details.</param>
        /// <param name="param4">Parameter 4 for string: The {0} '{1}' of service operation '{2}' expected a string value that could be parsed as a '{3}' for input parameter '{4}' but the parsing failed with the message: {5} See the inner exception for more details.</param>
        /// <param name="param5">Parameter 5 for string: The {0} '{1}' of service operation '{2}' expected a string value that could be parsed as a '{3}' for input parameter '{4}' but the parsing failed with the message: {5} See the inner exception for more details.</param>
        internal static string HttpOperationHandlerFailedToConvertInputString(object param0, object param1, object param2, object param3, object param4, object param5) {
            return string.Format(Culture, ResourceManager.GetString("HttpOperationHandlerFailedToConvertInputString", Culture), param0, param1, param2, param3, param4, param5);
        }
        
        /// <summary>Gets localized string like: The {0} '{1}' of service operation '{2}' expected a value of type '{3}' for input parameter '{4}' but retrieving the value from the received '{5}' instance failed with the following message: {6} See the inner exception for more details.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} '{1}' of service operation '{2}' expected a value of type '{3}' for input parameter '{4}' but retrieving the value from the received '{5}' instance failed with the following message: {6} See the inner exception for more details.</param>
        /// <param name="param1">Parameter 1 for string: The {0} '{1}' of service operation '{2}' expected a value of type '{3}' for input parameter '{4}' but retrieving the value from the received '{5}' instance failed with the following message: {6} See the inner exception for more details.</param>
        /// <param name="param2">Parameter 2 for string: The {0} '{1}' of service operation '{2}' expected a value of type '{3}' for input parameter '{4}' but retrieving the value from the received '{5}' instance failed with the following message: {6} See the inner exception for more details.</param>
        /// <param name="param3">Parameter 3 for string: The {0} '{1}' of service operation '{2}' expected a value of type '{3}' for input parameter '{4}' but retrieving the value from the received '{5}' instance failed with the following message: {6} See the inner exception for more details.</param>
        /// <param name="param4">Parameter 4 for string: The {0} '{1}' of service operation '{2}' expected a value of type '{3}' for input parameter '{4}' but retrieving the value from the received '{5}' instance failed with the following message: {6} See the inner exception for more details.</param>
        /// <param name="param5">Parameter 5 for string: The {0} '{1}' of service operation '{2}' expected a value of type '{3}' for input parameter '{4}' but retrieving the value from the received '{5}' instance failed with the following message: {6} See the inner exception for more details.</param>
        /// <param name="param6">Parameter 6 for string: The {0} '{1}' of service operation '{2}' expected a value of type '{3}' for input parameter '{4}' but retrieving the value from the received '{5}' instance failed with the following message: {6} See the inner exception for more details.</param>
        internal static string HttpOperationHandlerFailedToGetInnerContent(object param0, object param1, object param2, object param3, object param4, object param5, object param6) {
            return string.Format(Culture, ResourceManager.GetString("HttpOperationHandlerFailedToGetInnerContent", Culture), param0, param1, param2, param3, param4, param5, param6);
        }
        
        /// <summary>Gets localized string like: The service operation '{0}' expected '{1}' values but received '{2}' values.</summary>
        /// <param name="param0">Parameter 0 for string: The service operation '{0}' expected '{1}' values but received '{2}' values.</param>
        /// <param name="param1">Parameter 1 for string: The service operation '{0}' expected '{1}' values but received '{2}' values.</param>
        /// <param name="param2">Parameter 2 for string: The service operation '{0}' expected '{1}' values but received '{2}' values.</param>
        internal static string ServiceOperationReceivedWrongNumberOfValues(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("ServiceOperationReceivedWrongNumberOfValues", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The service operation '{0}' was expected to return '{1}' values but returned '{2}' values.</summary>
        /// <param name="param0">Parameter 0 for string: The service operation '{0}' was expected to return '{1}' values but returned '{2}' values.</param>
        /// <param name="param1">Parameter 1 for string: The service operation '{0}' was expected to return '{1}' values but returned '{2}' values.</param>
        /// <param name="param2">Parameter 2 for string: The service operation '{0}' was expected to return '{1}' values but returned '{2}' values.</param>
        internal static string ServiceOperationProducedWrongNumberOfValues(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("ServiceOperationProducedWrongNumberOfValues", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The service operation '{0}' expected a value assignable to type '{1}' for input parameter '{2}' but received a value of type '{3}'.</summary>
        /// <param name="param0">Parameter 0 for string: The service operation '{0}' expected a value assignable to type '{1}' for input parameter '{2}' but received a value of type '{3}'.</param>
        /// <param name="param1">Parameter 1 for string: The service operation '{0}' expected a value assignable to type '{1}' for input parameter '{2}' but received a value of type '{3}'.</param>
        /// <param name="param2">Parameter 2 for string: The service operation '{0}' expected a value assignable to type '{1}' for input parameter '{2}' but received a value of type '{3}'.</param>
        /// <param name="param3">Parameter 3 for string: The service operation '{0}' expected a value assignable to type '{1}' for input parameter '{2}' but received a value of type '{3}'.</param>
        internal static string ServiceOperationReceivedWrongType(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("ServiceOperationReceivedWrongType", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: The service operation '{0}' was expected to return a value of type '{1}' assignable to the '{2}' output parameter but returned a value of type '{3}'.</summary>
        /// <param name="param0">Parameter 0 for string: The service operation '{0}' was expected to return a value of type '{1}' assignable to the '{2}' output parameter but returned a value of type '{3}'.</param>
        /// <param name="param1">Parameter 1 for string: The service operation '{0}' was expected to return a value of type '{1}' assignable to the '{2}' output parameter but returned a value of type '{3}'.</param>
        /// <param name="param2">Parameter 2 for string: The service operation '{0}' was expected to return a value of type '{1}' assignable to the '{2}' output parameter but returned a value of type '{3}'.</param>
        /// <param name="param3">Parameter 3 for string: The service operation '{0}' was expected to return a value of type '{1}' assignable to the '{2}' output parameter but returned a value of type '{3}'.</param>
        internal static string ServiceOperationProducedWrongType(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("ServiceOperationProducedWrongType", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: The service operation '{0}' expected a string value that could be parsed as a '{1}' for input parameter '{2}' but the parsing failed with the message: {3} See the inner exception for more details.</summary>
        /// <param name="param0">Parameter 0 for string: The service operation '{0}' expected a string value that could be parsed as a '{1}' for input parameter '{2}' but the parsing failed with the message: {3} See the inner exception for more details.</param>
        /// <param name="param1">Parameter 1 for string: The service operation '{0}' expected a string value that could be parsed as a '{1}' for input parameter '{2}' but the parsing failed with the message: {3} See the inner exception for more details.</param>
        /// <param name="param2">Parameter 2 for string: The service operation '{0}' expected a string value that could be parsed as a '{1}' for input parameter '{2}' but the parsing failed with the message: {3} See the inner exception for more details.</param>
        /// <param name="param3">Parameter 3 for string: The service operation '{0}' expected a string value that could be parsed as a '{1}' for input parameter '{2}' but the parsing failed with the message: {3} See the inner exception for more details.</param>
        internal static string ServiceOperationFailedToConvertInputString(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("ServiceOperationFailedToConvertInputString", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: The service operation '{0}' expected a value of type '{1}' for input parameter '{2}' but retrieving the value from the received '{3}' instance failed with the following message: {4} See the inner exception for more details.</summary>
        /// <param name="param0">Parameter 0 for string: The service operation '{0}' expected a value of type '{1}' for input parameter '{2}' but retrieving the value from the received '{3}' instance failed with the following message: {4} See the inner exception for more details.</param>
        /// <param name="param1">Parameter 1 for string: The service operation '{0}' expected a value of type '{1}' for input parameter '{2}' but retrieving the value from the received '{3}' instance failed with the following message: {4} See the inner exception for more details.</param>
        /// <param name="param2">Parameter 2 for string: The service operation '{0}' expected a value of type '{1}' for input parameter '{2}' but retrieving the value from the received '{3}' instance failed with the following message: {4} See the inner exception for more details.</param>
        /// <param name="param3">Parameter 3 for string: The service operation '{0}' expected a value of type '{1}' for input parameter '{2}' but retrieving the value from the received '{3}' instance failed with the following message: {4} See the inner exception for more details.</param>
        /// <param name="param4">Parameter 4 for string: The service operation '{0}' expected a value of type '{1}' for input parameter '{2}' but retrieving the value from the received '{3}' instance failed with the following message: {4} See the inner exception for more details.</param>
        internal static string ServiceOperationFailedToGetInnerContent(object param0, object param1, object param2, object param3, object param4) {
            return string.Format(Culture, ResourceManager.GetString("ServiceOperationFailedToGetInnerContent", Culture), param0, param1, param2, param3, param4);
        }
        
        /// <summary>Gets localized string like: The service operation '{0}' has an input parameter of type '{1}' associated with the request message content that is not supported by the {2}.</summary>
        /// <param name="param0">Parameter 0 for string: The service operation '{0}' has an input parameter of type '{1}' associated with the request message content that is not supported by the {2}.</param>
        /// <param name="param1">Parameter 1 for string: The service operation '{0}' has an input parameter of type '{1}' associated with the request message content that is not supported by the {2}.</param>
        /// <param name="param2">Parameter 2 for string: The service operation '{0}' has an input parameter of type '{1}' associated with the request message content that is not supported by the {2}.</param>
        internal static string InvalidRequestContentParameter(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("InvalidRequestContentParameter", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The service operation '{0}' has a return value of type '{1}' associated with the request message content that is not supported by the {2}.</summary>
        /// <param name="param0">Parameter 0 for string: The service operation '{0}' has a return value of type '{1}' associated with the request message content that is not supported by the {2}.</param>
        /// <param name="param1">Parameter 1 for string: The service operation '{0}' has a return value of type '{1}' associated with the request message content that is not supported by the {2}.</param>
        /// <param name="param2">Parameter 2 for string: The service operation '{0}' has a return value of type '{1}' associated with the request message content that is not supported by the {2}.</param>
        internal static string InvalidReturnValueContentParameter(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("InvalidReturnValueContentParameter", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The service operation '{0}' has an output parameter of type '{1}' associated with the request message content that is not supported by the {2}.</summary>
        /// <param name="param0">Parameter 0 for string: The service operation '{0}' has an output parameter of type '{1}' associated with the request message content that is not supported by the {2}.</param>
        /// <param name="param1">Parameter 1 for string: The service operation '{0}' has an output parameter of type '{1}' associated with the request message content that is not supported by the {2}.</param>
        /// <param name="param2">Parameter 2 for string: The service operation '{0}' has an output parameter of type '{1}' associated with the request message content that is not supported by the {2}.</param>
        internal static string InvalidResponseContentParameter(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("InvalidResponseContentParameter", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The {0} is unable to determine the input parameter that should be associated with the request message content for service operation '{1}'. If the operation does not expect content in the request message use the HTTP GET method with the operation. Otherwise, ensure that one input parameter either has it's {2} property set to '{3}' or is a type that is assignable to one of the following: {4}, {5}, {6} or {7}.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} is unable to determine the input parameter that should be associated with the request message content for service operation '{1}'. If the operation does not expect content in the request message use the HTTP GET method with the operation. Otherwise, ensure that one input parameter either has it's {2} property set to '{3}' or is a type that is assignable to one of the following: {4}, {5}, {6} or {7}.</param>
        /// <param name="param1">Parameter 1 for string: The {0} is unable to determine the input parameter that should be associated with the request message content for service operation '{1}'. If the operation does not expect content in the request message use the HTTP GET method with the operation. Otherwise, ensure that one input parameter either has it's {2} property set to '{3}' or is a type that is assignable to one of the following: {4}, {5}, {6} or {7}.</param>
        /// <param name="param2">Parameter 2 for string: The {0} is unable to determine the input parameter that should be associated with the request message content for service operation '{1}'. If the operation does not expect content in the request message use the HTTP GET method with the operation. Otherwise, ensure that one input parameter either has it's {2} property set to '{3}' or is a type that is assignable to one of the following: {4}, {5}, {6} or {7}.</param>
        /// <param name="param3">Parameter 3 for string: The {0} is unable to determine the input parameter that should be associated with the request message content for service operation '{1}'. If the operation does not expect content in the request message use the HTTP GET method with the operation. Otherwise, ensure that one input parameter either has it's {2} property set to '{3}' or is a type that is assignable to one of the following: {4}, {5}, {6} or {7}.</param>
        /// <param name="param4">Parameter 4 for string: The {0} is unable to determine the input parameter that should be associated with the request message content for service operation '{1}'. If the operation does not expect content in the request message use the HTTP GET method with the operation. Otherwise, ensure that one input parameter either has it's {2} property set to '{3}' or is a type that is assignable to one of the following: {4}, {5}, {6} or {7}.</param>
        /// <param name="param5">Parameter 5 for string: The {0} is unable to determine the input parameter that should be associated with the request message content for service operation '{1}'. If the operation does not expect content in the request message use the HTTP GET method with the operation. Otherwise, ensure that one input parameter either has it's {2} property set to '{3}' or is a type that is assignable to one of the following: {4}, {5}, {6} or {7}.</param>
        /// <param name="param6">Parameter 6 for string: The {0} is unable to determine the input parameter that should be associated with the request message content for service operation '{1}'. If the operation does not expect content in the request message use the HTTP GET method with the operation. Otherwise, ensure that one input parameter either has it's {2} property set to '{3}' or is a type that is assignable to one of the following: {4}, {5}, {6} or {7}.</param>
        /// <param name="param7">Parameter 7 for string: The {0} is unable to determine the input parameter that should be associated with the request message content for service operation '{1}'. If the operation does not expect content in the request message use the HTTP GET method with the operation. Otherwise, ensure that one input parameter either has it's {2} property set to '{3}' or is a type that is assignable to one of the following: {4}, {5}, {6} or {7}.</param>
        internal static string UnknownRequestContentParameter(object param0, object param1, object param2, object param3, object param4, object param5, object param6, object param7) {
            return string.Format(Culture, ResourceManager.GetString("UnknownRequestContentParameter", Culture), param0, param1, param2, param3, param4, param5, param6, param7);
        }
        
        /// <summary>Gets localized string like: The {0} only supports service operations that have a single input parameter associated with the request message content.  Service operation '{1}' has '{2}' input parameters associated with the content of the request message:</summary>
        /// <param name="param0">Parameter 0 for string: The {0} only supports service operations that have a single input parameter associated with the request message content.  Service operation '{1}' has '{2}' input parameters associated with the content of the request message:</param>
        /// <param name="param1">Parameter 1 for string: The {0} only supports service operations that have a single input parameter associated with the request message content.  Service operation '{1}' has '{2}' input parameters associated with the content of the request message:</param>
        /// <param name="param2">Parameter 2 for string: The {0} only supports service operations that have a single input parameter associated with the request message content.  Service operation '{1}' has '{2}' input parameters associated with the content of the request message:</param>
        internal static string MultipleRequestContentParameters(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("MultipleRequestContentParameters", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Parameter '{0}' is associated with the request message content because it's {1} property is set to '{2}';</summary>
        /// <param name="param0">Parameter 0 for string: Parameter '{0}' is associated with the request message content because it's {1} property is set to '{2}';</param>
        /// <param name="param1">Parameter 1 for string: Parameter '{0}' is associated with the request message content because it's {1} property is set to '{2}';</param>
        /// <param name="param2">Parameter 2 for string: Parameter '{0}' is associated with the request message content because it's {1} property is set to '{2}';</param>
        internal static string RequestParameterWithIsContentParameterSet(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("RequestParameterWithIsContentParameterSet", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Parameter '{0}' is associated with the request message content because it is of type '{1}';</summary>
        /// <param name="param0">Parameter 0 for string: Parameter '{0}' is associated with the request message content because it is of type '{1}';</param>
        /// <param name="param1">Parameter 1 for string: Parameter '{0}' is associated with the request message content because it is of type '{1}';</param>
        internal static string RequestParameterWithContentType(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("RequestParameterWithContentType", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The {0} only supports service operations that have a return value or single output parameter associated with the response message content.  Service operation '{1}' has '{2}' outputs associated with the content of the response message:</summary>
        /// <param name="param0">Parameter 0 for string: The {0} only supports service operations that have a return value or single output parameter associated with the response message content.  Service operation '{1}' has '{2}' outputs associated with the content of the response message:</param>
        /// <param name="param1">Parameter 1 for string: The {0} only supports service operations that have a return value or single output parameter associated with the response message content.  Service operation '{1}' has '{2}' outputs associated with the content of the response message:</param>
        /// <param name="param2">Parameter 2 for string: The {0} only supports service operations that have a return value or single output parameter associated with the response message content.  Service operation '{1}' has '{2}' outputs associated with the content of the response message:</param>
        internal static string MultipleResponseContentParameters(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("MultipleResponseContentParameters", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Parameter '{0}' is associated with the response message content because it's {1} property is set to '{2}';</summary>
        /// <param name="param0">Parameter 0 for string: Parameter '{0}' is associated with the response message content because it's {1} property is set to '{2}';</param>
        /// <param name="param1">Parameter 1 for string: Parameter '{0}' is associated with the response message content because it's {1} property is set to '{2}';</param>
        /// <param name="param2">Parameter 2 for string: Parameter '{0}' is associated with the response message content because it's {1} property is set to '{2}';</param>
        internal static string ResponseParameterWithIsContentParameterSet(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("ResponseParameterWithIsContentParameterSet", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Parameter '{0}' is associated with the response message content because it is of type '{1}';</summary>
        /// <param name="param0">Parameter 0 for string: Parameter '{0}' is associated with the response message content because it is of type '{1}';</param>
        /// <param name="param1">Parameter 1 for string: Parameter '{0}' is associated with the response message content because it is of type '{1}';</param>
        internal static string ResponseParameterWithContentType(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ResponseParameterWithContentType", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The return value is associated with the response message content because it's {0} property is set to '{1}';</summary>
        /// <param name="param0">Parameter 0 for string: The return value is associated with the response message content because it's {0} property is set to '{1}';</param>
        /// <param name="param1">Parameter 1 for string: The return value is associated with the response message content because it's {0} property is set to '{1}';</param>
        internal static string ReturnValueWithIsContentParameterSet(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ReturnValueWithIsContentParameterSet", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The return value is associated with the response message content because it is of type '{0}';</summary>
        /// <param name="param0">Parameter 0 for string: The return value is associated with the response message content because it is of type '{0}';</param>
        internal static string ReturnValueWithContentType(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ReturnValueWithContentType", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Request {0} '{1}' output parameter '{2}' of type '{3}';</summary>
        /// <param name="param0">Parameter 0 for string: Request {0} '{1}' output parameter '{2}' of type '{3}';</param>
        /// <param name="param1">Parameter 1 for string: Request {0} '{1}' output parameter '{2}' of type '{3}';</param>
        /// <param name="param2">Parameter 2 for string: Request {0} '{1}' output parameter '{2}' of type '{3}';</param>
        /// <param name="param3">Parameter 3 for string: Request {0} '{1}' output parameter '{2}' of type '{3}';</param>
        internal static string RequestHandlerTypeOnlyOutputParameter(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("RequestHandlerTypeOnlyOutputParameter", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: Service operation output parameter '{0}' of type '{1}';</summary>
        /// <param name="param0">Parameter 0 for string: Service operation output parameter '{0}' of type '{1}';</param>
        /// <param name="param1">Parameter 1 for string: Service operation output parameter '{0}' of type '{1}';</param>
        internal static string ServiceOperationTypeOnlyOutputParameter(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ServiceOperationTypeOnlyOutputParameter", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Response {0} '{1}' output parameter '{2}' of type '{3}';</summary>
        /// <param name="param0">Parameter 0 for string: Response {0} '{1}' output parameter '{2}' of type '{3}';</param>
        /// <param name="param1">Parameter 1 for string: Response {0} '{1}' output parameter '{2}' of type '{3}';</param>
        /// <param name="param2">Parameter 2 for string: Response {0} '{1}' output parameter '{2}' of type '{3}';</param>
        /// <param name="param3">Parameter 3 for string: Response {0} '{1}' output parameter '{2}' of type '{3}';</param>
        internal static string ResponseHandlerTypeOnlyOutputParameter(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("ResponseHandlerTypeOnlyOutputParameter", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</summary>
        /// <param name="param0">Parameter 0 for string: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</param>
        /// <param name="param1">Parameter 1 for string: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</param>
        /// <param name="param2">Parameter 2 for string: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</param>
        /// <param name="param3">Parameter 3 for string: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</param>
        /// <param name="param4">Parameter 4 for string: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</param>
        /// <param name="param5">Parameter 5 for string: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</param>
        internal static string RequestHandlerWithNoPossibleBindingForNonStringConvertableType(object param0, object param1, object param2, object param3, object param4, object param5) {
            return string.Format(Culture, ResourceManager.GetString("RequestHandlerWithNoPossibleBindingForNonStringConvertableType", Culture), param0, param1, param2, param3, param4, param5);
        }
        
        /// <summary>Gets localized string like: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' HttpOperationHandler has an output parameter with a type assignable to '{4}' or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</summary>
        /// <param name="param0">Parameter 0 for string: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' HttpOperationHandler has an output parameter with a type assignable to '{4}' or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</param>
        /// <param name="param1">Parameter 1 for string: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' HttpOperationHandler has an output parameter with a type assignable to '{4}' or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</param>
        /// <param name="param2">Parameter 2 for string: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' HttpOperationHandler has an output parameter with a type assignable to '{4}' or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</param>
        /// <param name="param3">Parameter 3 for string: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' HttpOperationHandler has an output parameter with a type assignable to '{4}' or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</param>
        /// <param name="param4">Parameter 4 for string: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' HttpOperationHandler has an output parameter with a type assignable to '{4}' or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</param>
        /// <param name="param5">Parameter 5 for string: The request {0} '{1}' of service operation '{2}' will never receive a value for input parameter '{3}' of type '{4}'. Ensure that a request {0} that executes prior to the '{5}' HttpOperationHandler has an output parameter with a type assignable to '{4}' or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</param>
        internal static string RequestHandlerWithNoPossibleBindingForStringConvertableType(object param0, object param1, object param2, object param3, object param4, object param5) {
            return string.Format(Culture, ResourceManager.GetString("RequestHandlerWithNoPossibleBindingForStringConvertableType", Culture), param0, param1, param2, param3, param4, param5);
        }
        
        /// <summary>Gets localized string like: The request {0} '{1}' of service operation '{2}' will receive more than one value for input parameter '{3}' of type '{4}'. Ensure that only one request {0} in the following list has an output parameter with a type assignable to '{4}' or that at least one request {0} in the following list has an output parameter named '{3}':</summary>
        /// <param name="param0">Parameter 0 for string: The request {0} '{1}' of service operation '{2}' will receive more than one value for input parameter '{3}' of type '{4}'. Ensure that only one request {0} in the following list has an output parameter with a type assignable to '{4}' or that at least one request {0} in the following list has an output parameter named '{3}':</param>
        /// <param name="param1">Parameter 1 for string: The request {0} '{1}' of service operation '{2}' will receive more than one value for input parameter '{3}' of type '{4}'. Ensure that only one request {0} in the following list has an output parameter with a type assignable to '{4}' or that at least one request {0} in the following list has an output parameter named '{3}':</param>
        /// <param name="param2">Parameter 2 for string: The request {0} '{1}' of service operation '{2}' will receive more than one value for input parameter '{3}' of type '{4}'. Ensure that only one request {0} in the following list has an output parameter with a type assignable to '{4}' or that at least one request {0} in the following list has an output parameter named '{3}':</param>
        /// <param name="param3">Parameter 3 for string: The request {0} '{1}' of service operation '{2}' will receive more than one value for input parameter '{3}' of type '{4}'. Ensure that only one request {0} in the following list has an output parameter with a type assignable to '{4}' or that at least one request {0} in the following list has an output parameter named '{3}':</param>
        /// <param name="param4">Parameter 4 for string: The request {0} '{1}' of service operation '{2}' will receive more than one value for input parameter '{3}' of type '{4}'. Ensure that only one request {0} in the following list has an output parameter with a type assignable to '{4}' or that at least one request {0} in the following list has an output parameter named '{3}':</param>
        internal static string RequestHandlerWithMultipleTypeOnlyBindings(object param0, object param1, object param2, object param3, object param4) {
            return string.Format(Culture, ResourceManager.GetString("RequestHandlerWithMultipleTypeOnlyBindings", Culture), param0, param1, param2, param3, param4);
        }
        
        /// <summary>Gets localized string like: The service operation '{0}' will never receive a value for the input parameter '{1}' of type '{2}'. Ensure that a request {3} has an output parameter with a type assignable to '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: The service operation '{0}' will never receive a value for the input parameter '{1}' of type '{2}'. Ensure that a request {3} has an output parameter with a type assignable to '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: The service operation '{0}' will never receive a value for the input parameter '{1}' of type '{2}'. Ensure that a request {3} has an output parameter with a type assignable to '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: The service operation '{0}' will never receive a value for the input parameter '{1}' of type '{2}'. Ensure that a request {3} has an output parameter with a type assignable to '{2}'.</param>
        /// <param name="param3">Parameter 3 for string: The service operation '{0}' will never receive a value for the input parameter '{1}' of type '{2}'. Ensure that a request {3} has an output parameter with a type assignable to '{2}'.</param>
        internal static string ServiceOperationWithNoPossibleBindingForNonStringConvertableType(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("ServiceOperationWithNoPossibleBindingForNonStringConvertableType", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: The service operation '{0}' will never receive a value for the input parameter '{1}' of type '{2}'. Ensure that a request {3} has an output parameter with a type assignable to '{2}' or that the output parameter has the name '{1}' and provides a string value that can be parsed as a '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: The service operation '{0}' will never receive a value for the input parameter '{1}' of type '{2}'. Ensure that a request {3} has an output parameter with a type assignable to '{2}' or that the output parameter has the name '{1}' and provides a string value that can be parsed as a '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: The service operation '{0}' will never receive a value for the input parameter '{1}' of type '{2}'. Ensure that a request {3} has an output parameter with a type assignable to '{2}' or that the output parameter has the name '{1}' and provides a string value that can be parsed as a '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: The service operation '{0}' will never receive a value for the input parameter '{1}' of type '{2}'. Ensure that a request {3} has an output parameter with a type assignable to '{2}' or that the output parameter has the name '{1}' and provides a string value that can be parsed as a '{2}'.</param>
        /// <param name="param3">Parameter 3 for string: The service operation '{0}' will never receive a value for the input parameter '{1}' of type '{2}'. Ensure that a request {3} has an output parameter with a type assignable to '{2}' or that the output parameter has the name '{1}' and provides a string value that can be parsed as a '{2}'.</param>
        internal static string ServiceOperationWithNoPossibleBindingForStringConvertableType(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("ServiceOperationWithNoPossibleBindingForStringConvertableType", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: The service operation '{0}' will receive more than one value for input parameter '{1}' of type '{2}'. Ensure that only one request {3} in the following list has an output parameter with a type assignable to '{2}' or that at least one request HttpOperationHandler in the following list has an output parameter named '{1}':</summary>
        /// <param name="param0">Parameter 0 for string: The service operation '{0}' will receive more than one value for input parameter '{1}' of type '{2}'. Ensure that only one request {3} in the following list has an output parameter with a type assignable to '{2}' or that at least one request HttpOperationHandler in the following list has an output parameter named '{1}':</param>
        /// <param name="param1">Parameter 1 for string: The service operation '{0}' will receive more than one value for input parameter '{1}' of type '{2}'. Ensure that only one request {3} in the following list has an output parameter with a type assignable to '{2}' or that at least one request HttpOperationHandler in the following list has an output parameter named '{1}':</param>
        /// <param name="param2">Parameter 2 for string: The service operation '{0}' will receive more than one value for input parameter '{1}' of type '{2}'. Ensure that only one request {3} in the following list has an output parameter with a type assignable to '{2}' or that at least one request HttpOperationHandler in the following list has an output parameter named '{1}':</param>
        /// <param name="param3">Parameter 3 for string: The service operation '{0}' will receive more than one value for input parameter '{1}' of type '{2}'. Ensure that only one request {3} in the following list has an output parameter with a type assignable to '{2}' or that at least one request HttpOperationHandler in the following list has an output parameter named '{1}':</param>
        internal static string ServiceOperationWithMultipleTypeOnlyBindings(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("ServiceOperationWithMultipleTypeOnlyBindings", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that a request {0}, the service operation, or a response HttpOperationHandler that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</summary>
        /// <param name="param0">Parameter 0 for string: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that a request {0}, the service operation, or a response HttpOperationHandler that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</param>
        /// <param name="param1">Parameter 1 for string: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that a request {0}, the service operation, or a response HttpOperationHandler that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</param>
        /// <param name="param2">Parameter 2 for string: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that a request {0}, the service operation, or a response HttpOperationHandler that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</param>
        /// <param name="param3">Parameter 3 for string: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that a request {0}, the service operation, or a response HttpOperationHandler that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</param>
        /// <param name="param4">Parameter 4 for string: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that a request {0}, the service operation, or a response HttpOperationHandler that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</param>
        /// <param name="param5">Parameter 5 for string: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that a request {0}, the service operation, or a response HttpOperationHandler that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'.</param>
        internal static string ResponseHandlerWithNoPossibleBindingForNonStringConvertableType(object param0, object param1, object param2, object param3, object param4, object param5) {
            return string.Format(Culture, ResourceManager.GetString("ResponseHandlerWithNoPossibleBindingForNonStringConvertableType", Culture), param0, param1, param2, param3, param4, param5);
        }
        
        /// <summary>Gets localized string like: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that at least one request {0}, the service operation, or response {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'  or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</summary>
        /// <param name="param0">Parameter 0 for string: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that at least one request {0}, the service operation, or response {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'  or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</param>
        /// <param name="param1">Parameter 1 for string: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that at least one request {0}, the service operation, or response {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'  or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</param>
        /// <param name="param2">Parameter 2 for string: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that at least one request {0}, the service operation, or response {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'  or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</param>
        /// <param name="param3">Parameter 3 for string: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that at least one request {0}, the service operation, or response {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'  or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</param>
        /// <param name="param4">Parameter 4 for string: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that at least one request {0}, the service operation, or response {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'  or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</param>
        /// <param name="param5">Parameter 5 for string: The response {0} '{1}' of service operation '{2}' will never receive a value for the input parameter '{3}' of type '{4}'. Ensure that at least one request {0}, the service operation, or response {0} that executes prior to the '{5}' {0} has an output parameter with a type assignable to '{4}'  or that the output parameter has the name '{3}' and provides a string value that can be parsed as a '{4}'.</param>
        internal static string ResponseHandlerWithNoPossibleBindingForStringConvertableType(object param0, object param1, object param2, object param3, object param4, object param5) {
            return string.Format(Culture, ResourceManager.GetString("ResponseHandlerWithNoPossibleBindingForStringConvertableType", Culture), param0, param1, param2, param3, param4, param5);
        }
        
        /// <summary>Gets localized string like: The response {0} '{1}' of service operation '{2}' will receive more than one value for input parameter '{3}' of type '{4}'. Ensure that only the service operation or one {0} in the following list has an output parameter with a type assignable to '{4}' or that the service operation or at least one HttpOperationHandler in the following list has an output parameter named '{3}':</summary>
        /// <param name="param0">Parameter 0 for string: The response {0} '{1}' of service operation '{2}' will receive more than one value for input parameter '{3}' of type '{4}'. Ensure that only the service operation or one {0} in the following list has an output parameter with a type assignable to '{4}' or that the service operation or at least one HttpOperationHandler in the following list has an output parameter named '{3}':</param>
        /// <param name="param1">Parameter 1 for string: The response {0} '{1}' of service operation '{2}' will receive more than one value for input parameter '{3}' of type '{4}'. Ensure that only the service operation or one {0} in the following list has an output parameter with a type assignable to '{4}' or that the service operation or at least one HttpOperationHandler in the following list has an output parameter named '{3}':</param>
        /// <param name="param2">Parameter 2 for string: The response {0} '{1}' of service operation '{2}' will receive more than one value for input parameter '{3}' of type '{4}'. Ensure that only the service operation or one {0} in the following list has an output parameter with a type assignable to '{4}' or that the service operation or at least one HttpOperationHandler in the following list has an output parameter named '{3}':</param>
        /// <param name="param3">Parameter 3 for string: The response {0} '{1}' of service operation '{2}' will receive more than one value for input parameter '{3}' of type '{4}'. Ensure that only the service operation or one {0} in the following list has an output parameter with a type assignable to '{4}' or that the service operation or at least one HttpOperationHandler in the following list has an output parameter named '{3}':</param>
        /// <param name="param4">Parameter 4 for string: The response {0} '{1}' of service operation '{2}' will receive more than one value for input parameter '{3}' of type '{4}'. Ensure that only the service operation or one {0} in the following list has an output parameter with a type assignable to '{4}' or that the service operation or at least one HttpOperationHandler in the following list has an output parameter named '{3}':</param>
        internal static string ResponseHandlerWithMultipleTypeOnlyBindings(object param0, object param1, object param2, object param3, object param4) {
            return string.Format(Culture, ResourceManager.GetString("ResponseHandlerWithMultipleTypeOnlyBindings", Culture), param0, param1, param2, param3, param4);
        }
        
        /// <summary>Gets localized string like: Neither the service operation nor any {0} instances will provide an {1} for service operation '{2}'. Ensure there is at least one {0} with an output parameter of type '{1}' or that the service operation returns an {1}.</summary>
        /// <param name="param0">Parameter 0 for string: Neither the service operation nor any {0} instances will provide an {1} for service operation '{2}'. Ensure there is at least one {0} with an output parameter of type '{1}' or that the service operation returns an {1}.</param>
        /// <param name="param1">Parameter 1 for string: Neither the service operation nor any {0} instances will provide an {1} for service operation '{2}'. Ensure there is at least one {0} with an output parameter of type '{1}' or that the service operation returns an {1}.</param>
        /// <param name="param2">Parameter 2 for string: Neither the service operation nor any {0} instances will provide an {1} for service operation '{2}'. Ensure there is at least one {0} with an output parameter of type '{1}' or that the service operation returns an {1}.</param>
        internal static string ResponseSinkHandlerWithNoHttpResponseMessageSource(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("ResponseSinkHandlerWithNoHttpResponseMessageSource", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The response message returned by the {0} property of this exception should be immediately returned to the client.  No further handling of the request message is required.</summary>
        /// <param name="param0">Parameter 0 for string: The response message returned by the {0} property of this exception should be immediately returned to the client.  No further handling of the request message is required.</param>
        internal static string HttpResponseExceptionMessage(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HttpResponseExceptionMessage", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {0} '{1}' of type '{2}' cannot be used with the {3}.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} '{1}' of type '{2}' cannot be used with the {3}.</param>
        /// <param name="param1">Parameter 1 for string: The {0} '{1}' of type '{2}' cannot be used with the {3}.</param>
        /// <param name="param2">Parameter 2 for string: The {0} '{1}' of type '{2}' cannot be used with the {3}.</param>
        /// <param name="param3">Parameter 3 for string: The {0} '{1}' of type '{2}' cannot be used with the {3}.</param>
        internal static string InvalidParameterForContentHandler(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("InvalidParameterForContentHandler", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: A value of type '{0}' cannot be converted into a value of type '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: A value of type '{0}' cannot be converted into a value of type '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: A value of type '{0}' cannot be converted into a value of type '{1}'.</param>
        internal static string ValueConversionFailed(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ValueConversionFailed", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The value '{0}' is not a valid media range.</summary>
        /// <param name="param0">Parameter 0 for string: The value '{0}' is not a valid media range.</param>
        internal static string InvalidMediaRange(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidMediaRange", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The null value at index '{0}' is not valid media range.</summary>
        /// <param name="param0">Parameter 0 for string: The null value at index '{0}' is not valid media range.</param>
        internal static string InvalidNullMediaRange(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidNullMediaRange", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The media range value '{0}' at index '{1}' has already been added to the collection of media ranges.</summary>
        /// <param name="param0">Parameter 0 for string: The media range value '{0}' at index '{1}' has already been added to the collection of media ranges.</param>
        /// <param name="param1">Parameter 1 for string: The media range value '{0}' at index '{1}' has already been added to the collection of media ranges.</param>
        internal static string MediaRangeAlreadyAdded(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("MediaRangeAlreadyAdded", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The media range '{0}' has already been mapped to media-type '{1}' and cannot be mapped to a second media-type of '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: The media range '{0}' has already been mapped to media-type '{1}' and cannot be mapped to a second media-type of '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: The media range '{0}' has already been mapped to media-type '{1}' and cannot be mapped to a second media-type of '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: The media range '{0}' has already been mapped to media-type '{1}' and cannot be mapped to a second media-type of '{2}'.</param>
        internal static string MediaRangeAlreadyMapped(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("MediaRangeAlreadyMapped", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The media range '{0}' cannot be a supported media type.</summary>
        /// <param name="param0">Parameter 0 for string: The media range '{0}' cannot be a supported media type.</param>
        internal static string MediaTypeCanNotBeMediaRange(object param0) {
            return string.Format(Culture, ResourceManager.GetString("MediaTypeCanNotBeMediaRange", Culture), param0);
        }
        
        /// <summary>Gets localized string like: A non-null request URI must be provided to determine if a '{0}' matches a given request or response message.</summary>
        /// <param name="param0">Parameter 0 for string: A non-null request URI must be provided to determine if a '{0}' matches a given request or response message.</param>
        internal static string NonNullUriRequiredForMediaTypeMapping(object param0) {
            return string.Format(Culture, ResourceManager.GetString("NonNullUriRequiredForMediaTypeMapping", Culture), param0);
        }
        
        /// <summary>Gets localized string like: A non-null request URI must be provided to determine if a '{0}' matches a given request or response message.</summary>
        /// <param name="param0">Parameter 0 for string: A non-null request URI must be provided to determine if a '{0}' matches a given request or response message.</param>
        internal static string NonNullUriRequiredForQueryStringMapping(object param0) {
            return string.Format(Culture, ResourceManager.GetString("NonNullUriRequiredForQueryStringMapping", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The '{0}' '{1}' parameter must have a reference to a '{2}' via the '{3}' property.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' '{1}' parameter must have a reference to a '{2}' via the '{3}' property.</param>
        /// <param name="param1">Parameter 1 for string: The '{0}' '{1}' parameter must have a reference to a '{2}' via the '{3}' property.</param>
        /// <param name="param2">Parameter 2 for string: The '{0}' '{1}' parameter must have a reference to a '{2}' via the '{3}' property.</param>
        /// <param name="param3">Parameter 3 for string: The '{0}' '{1}' parameter must have a reference to a '{2}' via the '{3}' property.</param>
        internal static string ResponseMustReferenceRequest(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("ResponseMustReferenceRequest", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: The UriTemplate variable values cannot be determined for the uri '{0}' because it does not match the UriTemplate '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: The UriTemplate variable values cannot be determined for the uri '{0}' because it does not match the UriTemplate '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: The UriTemplate variable values cannot be determined for the uri '{0}' because it does not match the UriTemplate '{1}'.</param>
        internal static string UriTemplateDoesNotMatchUri(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("UriTemplateDoesNotMatchUri", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Service '{0}' implements multiple ServiceContract types, and no endpoints are defined in the configuration file.  The ServiceHost of type '{1}'  can set up default endpoints, but only if the service implements only a single ServiceContract. Either change the service to only implement a single ServiceContract, or else define endpoints for the service explicitly in the configuration file.</summary>
        /// <param name="param0">Parameter 0 for string: Service '{0}' implements multiple ServiceContract types, and no endpoints are defined in the configuration file.  The ServiceHost of type '{1}'  can set up default endpoints, but only if the service implements only a single ServiceContract. Either change the service to only implement a single ServiceContract, or else define endpoints for the service explicitly in the configuration file.</param>
        /// <param name="param1">Parameter 1 for string: Service '{0}' implements multiple ServiceContract types, and no endpoints are defined in the configuration file.  The ServiceHost of type '{1}'  can set up default endpoints, but only if the service implements only a single ServiceContract. Either change the service to only implement a single ServiceContract, or else define endpoints for the service explicitly in the configuration file.</param>
        internal static string DefaultEndpointsServiceWithMultipleContracts(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("DefaultEndpointsServiceWithMultipleContracts", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Service '{0}' does not implement a ServiceContract type.  The ServiceHost of type '{1}' cannot setup default endpoints if the service does not implement a ServiceContract type.</summary>
        /// <param name="param0">Parameter 0 for string: Service '{0}' does not implement a ServiceContract type.  The ServiceHost of type '{1}' cannot setup default endpoints if the service does not implement a ServiceContract type.</param>
        /// <param name="param1">Parameter 1 for string: Service '{0}' does not implement a ServiceContract type.  The ServiceHost of type '{1}' cannot setup default endpoints if the service does not implement a ServiceContract type.</param>
        internal static string DefaultEndpointsServiceWithNoContract(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("DefaultEndpointsServiceWithNoContract", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The standard endpoint of type '{0}' does not have a binding of type '{1}'.  The endpoint is initialized with the proper binding and it should not be removed or replaced.</summary>
        /// <param name="param0">Parameter 0 for string: The standard endpoint of type '{0}' does not have a binding of type '{1}'.  The endpoint is initialized with the proper binding and it should not be removed or replaced.</param>
        /// <param name="param1">Parameter 1 for string: The standard endpoint of type '{0}' does not have a binding of type '{1}'.  The endpoint is initialized with the proper binding and it should not be removed or replaced.</param>
        internal static string HttpEndpointRequiresHttpBinding(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HttpEndpointRequiresHttpBinding", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The standard endpoint of type '{0}' does not have a behavior of type '{1}'.  The endpoint is initialized with the proper behavior and it should not be removed or replaced.</summary>
        /// <param name="param0">Parameter 0 for string: The standard endpoint of type '{0}' does not have a behavior of type '{1}'.  The endpoint is initialized with the proper behavior and it should not be removed or replaced.</param>
        /// <param name="param1">Parameter 1 for string: The standard endpoint of type '{0}' does not have a behavior of type '{1}'.  The endpoint is initialized with the proper behavior and it should not be removed or replaced.</param>
        internal static string HttpBehaviorNotFoundWithEndpoint(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HttpBehaviorNotFoundWithEndpoint", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: '{0}' does not support ApplyClientBehavior.</summary>
        /// <param name="param0">Parameter 0 for string: '{0}' does not support ApplyClientBehavior.</param>
        internal static string ApplyClientBehaviorNotSupportedByHttpBehavior(object param0) {
            return string.Format(Culture, ResourceManager.GetString("ApplyClientBehaviorNotSupportedByHttpBehavior", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The endpoint address '{0}' has message headers and is being used with a binding that's configured for message version None. Either change the endpoint address to not contain message headers or change the binding to be one that supports SOAP (for example, WSHttpBinding).</summary>
        /// <param name="param0">Parameter 0 for string: The endpoint address '{0}' has message headers and is being used with a binding that's configured for message version None. Either change the endpoint address to not contain message headers or change the binding to be one that supports SOAP (for example, WSHttpBinding).</param>
        internal static string HttpServiceEndpointCannotHaveMessageHeaders(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HttpServiceEndpointCannotHaveMessageHeaders", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The ServiceEndpoint for '{0}' must have a binding.</summary>
        /// <param name="param0">Parameter 0 for string: The ServiceEndpoint for '{0}' must have a binding.</param>
        internal static string HttpBehaviorBindingRequired(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HttpBehaviorBindingRequired", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The endpoint at '{0}' must have a binding with a scheme of 'http' or 'https'.</summary>
        /// <param name="param0">Parameter 0 for string: The endpoint at '{0}' must have a binding with a scheme of 'http' or 'https'.</param>
        internal static string InvalidUriScheme(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidUriScheme", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The endpoint at '{0}' must have a binding with a message version of 'MessageVersion.None'.</summary>
        /// <param name="param0">Parameter 0 for string: The endpoint at '{0}' must have a binding with a message version of 'MessageVersion.None'.</param>
        internal static string InvalidMessageVersion(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidMessageVersion", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The endpoint at '{0}' must have a binding with a transport binding element that has 'ManualAddressing' set to true.</summary>
        /// <param name="param0">Parameter 0 for string: The endpoint at '{0}' must have a binding with a transport binding element that has 'ManualAddressing' set to true.</param>
        internal static string InvalidManualAddressingValue(object param0) {
            return string.Format(Culture, ResourceManager.GetString("InvalidManualAddressingValue", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The endpoint at '{0}' must have a binding with a '{1}' of type '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: The endpoint at '{0}' must have a binding with a '{1}' of type '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: The endpoint at '{0}' must have a binding with a '{1}' of type '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: The endpoint at '{0}' must have a binding with a '{1}' of type '{2}'.</param>
        internal static string InvalidMessageEncodingBindingElement(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("InvalidMessageEncodingBindingElement", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Operation '{0}' on contract '{1}, is invalid since it has an '{2}' configured with OperationUse Encoded or OperationStyle Rpc.</summary>
        /// <param name="param0">Parameter 0 for string: Operation '{0}' on contract '{1}, is invalid since it has an '{2}' configured with OperationUse Encoded or OperationStyle Rpc.</param>
        /// <param name="param1">Parameter 1 for string: Operation '{0}' on contract '{1}, is invalid since it has an '{2}' configured with OperationUse Encoded or OperationStyle Rpc.</param>
        /// <param name="param2">Parameter 2 for string: Operation '{0}' on contract '{1}, is invalid since it has an '{2}' configured with OperationUse Encoded or OperationStyle Rpc.</param>
        internal static string InvalidXmlSerializerFormatAttribute(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("InvalidXmlSerializerFormatAttribute", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Operation '{0}' on contract '{1}' is invalid since it has once or more message headers.</summary>
        /// <param name="param0">Parameter 0 for string: Operation '{0}' on contract '{1}' is invalid since it has once or more message headers.</param>
        /// <param name="param1">Parameter 1 for string: Operation '{0}' on contract '{1}' is invalid since it has once or more message headers.</param>
        internal static string InvalidOperationWithMessageHeaders(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("InvalidOperationWithMessageHeaders", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Operation '{0}' on contract '{1}' is invalid since it has a '{2}' parameter (of type '{3}').</summary>
        /// <param name="param0">Parameter 0 for string: Operation '{0}' on contract '{1}' is invalid since it has a '{2}' parameter (of type '{3}').</param>
        /// <param name="param1">Parameter 1 for string: Operation '{0}' on contract '{1}' is invalid since it has a '{2}' parameter (of type '{3}').</param>
        /// <param name="param2">Parameter 2 for string: Operation '{0}' on contract '{1}' is invalid since it has a '{2}' parameter (of type '{3}').</param>
        /// <param name="param3">Parameter 3 for string: Operation '{0}' on contract '{1}' is invalid since it has a '{2}' parameter (of type '{3}').</param>
        internal static string InvalidMessageContractParameter(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("InvalidMessageContractParameter", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: Operation '{0}' on contract '{1}' is invalid since it has message parameter '{2}' of type '{3}'.</summary>
        /// <param name="param0">Parameter 0 for string: Operation '{0}' on contract '{1}' is invalid since it has message parameter '{2}' of type '{3}'.</param>
        /// <param name="param1">Parameter 1 for string: Operation '{0}' on contract '{1}' is invalid since it has message parameter '{2}' of type '{3}'.</param>
        /// <param name="param2">Parameter 2 for string: Operation '{0}' on contract '{1}' is invalid since it has message parameter '{2}' of type '{3}'.</param>
        /// <param name="param3">Parameter 3 for string: Operation '{0}' on contract '{1}' is invalid since it has message parameter '{2}' of type '{3}'.</param>
        internal static string InvalidMessageParameter(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("InvalidMessageParameter", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: Operation '{0}' in contract '{1}' has both '{2}' and '{3}'; only one can be present.</summary>
        /// <param name="param0">Parameter 0 for string: Operation '{0}' in contract '{1}' has both '{2}' and '{3}'; only one can be present.</param>
        /// <param name="param1">Parameter 1 for string: Operation '{0}' in contract '{1}' has both '{2}' and '{3}'; only one can be present.</param>
        /// <param name="param2">Parameter 2 for string: Operation '{0}' in contract '{1}' has both '{2}' and '{3}'; only one can be present.</param>
        /// <param name="param3">Parameter 3 for string: Operation '{0}' in contract '{1}' has both '{2}' and '{3}'; only one can be present.</param>
        internal static string MultipleWebAttributes(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("MultipleWebAttributes", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: Operation '{0}' on contract '{1}' is invalid because it returns a value of type '{2}' or has an output parameter of type '{2}'.  To access '{2}' within an operation, include it as an input parameter and modify its properties.</summary>
        /// <param name="param0">Parameter 0 for string: Operation '{0}' on contract '{1}' is invalid because it returns a value of type '{2}' or has an output parameter of type '{2}'.  To access '{2}' within an operation, include it as an input parameter and modify its properties.</param>
        /// <param name="param1">Parameter 1 for string: Operation '{0}' on contract '{1}' is invalid because it returns a value of type '{2}' or has an output parameter of type '{2}'.  To access '{2}' within an operation, include it as an input parameter and modify its properties.</param>
        /// <param name="param2">Parameter 2 for string: Operation '{0}' on contract '{1}' is invalid because it returns a value of type '{2}' or has an output parameter of type '{2}'.  To access '{2}' within an operation, include it as an input parameter and modify its properties.</param>
        internal static string OperationCanNotReturnHttpReferenceType(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("OperationCanNotReturnHttpReferenceType", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: Operation '{0}' on contract '{1}' is invalid since it returns a {2} or has an output parameter of type {2} and has a response format explicitly set to Json.</summary>
        /// <param name="param0">Parameter 0 for string: Operation '{0}' on contract '{1}' is invalid since it returns a {2} or has an output parameter of type {2} and has a response format explicitly set to Json.</param>
        /// <param name="param1">Parameter 1 for string: Operation '{0}' on contract '{1}' is invalid since it returns a {2} or has an output parameter of type {2} and has a response format explicitly set to Json.</param>
        /// <param name="param2">Parameter 2 for string: Operation '{0}' on contract '{1}' is invalid since it returns a {2} or has an output parameter of type {2} and has a response format explicitly set to Json.</param>
        internal static string OperationCanNotReturnXmlAndBeJson(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("OperationCanNotReturnXmlAndBeJson", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: There are multiple operations with HTTP method '{1}' and a UriTemplate that is equivalent to '{0}'. Each operation requires a unique combination of UriTemplate and Method to unambiguously dispatch messages.</summary>
        /// <param name="param0">Parameter 0 for string: There are multiple operations with HTTP method '{1}' and a UriTemplate that is equivalent to '{0}'. Each operation requires a unique combination of UriTemplate and Method to unambiguously dispatch messages.</param>
        /// <param name="param1">Parameter 1 for string: There are multiple operations with HTTP method '{1}' and a UriTemplate that is equivalent to '{0}'. Each operation requires a unique combination of UriTemplate and Method to unambiguously dispatch messages.</param>
        internal static string MultipleOperationsWithSameMethodAndUriTemplate(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("MultipleOperationsWithSameMethodAndUriTemplate", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: A value must be specified for the '{0}' on the '{1}' element.</summary>
        /// <param name="param0">Parameter 0 for string: A value must be specified for the '{0}' on the '{1}' element.</param>
        /// <param name="param1">Parameter 1 for string: A value must be specified for the '{0}' on the '{1}' element.</param>
        internal static string AttributeRequiredOnConfigElement(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("AttributeRequiredOnConfigElement", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: At least one of the following '{0}' attributes must be specified: '{1}', '{2}' or '{3}'.</summary>
        /// <param name="param0">Parameter 0 for string: At least one of the following '{0}' attributes must be specified: '{1}', '{2}' or '{3}'.</param>
        /// <param name="param1">Parameter 1 for string: At least one of the following '{0}' attributes must be specified: '{1}', '{2}' or '{3}'.</param>
        /// <param name="param2">Parameter 2 for string: At least one of the following '{0}' attributes must be specified: '{1}', '{2}' or '{3}'.</param>
        /// <param name="param3">Parameter 3 for string: At least one of the following '{0}' attributes must be specified: '{1}', '{2}' or '{3}'.</param>
        internal static string AtLeastOneMediaTypeMappingAttributeRequired(object param0, object param1, object param2, object param3) {
            return string.Format(Culture, ResourceManager.GetString("AtLeastOneMediaTypeMappingAttributeRequired", Culture), param0, param1, param2, param3);
        }
        
        /// <summary>Gets localized string like: If a value is specified for the '{0}'  on the '{1}' element, then a value must also be specified for the '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: If a value is specified for the '{0}'  on the '{1}' element, then a value must also be specified for the '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: If a value is specified for the '{0}'  on the '{1}' element, then a value must also be specified for the '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: If a value is specified for the '{0}'  on the '{1}' element, then a value must also be specified for the '{2}'.</param>
        internal static string AttributeRequiredOnConfigElementIfOtherAttributeSpecified(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("AttributeRequiredOnConfigElementIfOtherAttributeSpecified", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: "The configuration file specified type '{0}' for the '{1}' property but that type is not a subtype of '{2}'.  The '{1}' must be a public class that is a subtype of '{2}', and it must have a public default constructor.</summary>
        /// <param name="param0">Parameter 0 for string: "The configuration file specified type '{0}' for the '{1}' property but that type is not a subtype of '{2}'.  The '{1}' must be a public class that is a subtype of '{2}', and it must have a public default constructor.</param>
        /// <param name="param1">Parameter 1 for string: "The configuration file specified type '{0}' for the '{1}' property but that type is not a subtype of '{2}'.  The '{1}' must be a public class that is a subtype of '{2}', and it must have a public default constructor.</param>
        /// <param name="param2">Parameter 2 for string: "The configuration file specified type '{0}' for the '{1}' property but that type is not a subtype of '{2}'.  The '{1}' must be a public class that is a subtype of '{2}', and it must have a public default constructor.</param>
        internal static string HttpMessageConfigurationPropertyTypeMismatch(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageConfigurationPropertyTypeMismatch", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The '{0}' is not supported on the client side.  The '{1}' is the recommended API for sending HTTP requests.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' is not supported on the client side.  The '{1}' is the recommended API for sending HTTP requests.</param>
        /// <param name="param1">Parameter 1 for string: The '{0}' is not supported on the client side.  The '{1}' is the recommended API for sending HTTP requests.</param>
        internal static string HttpEndpointNotSupported(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HttpEndpointNotSupported", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The '{0}' requires the '{1}' binding.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' requires the '{1}' binding.</param>
        /// <param name="param1">Parameter 1 for string: The '{0}' requires the '{1}' binding.</param>
        internal static string HttpEndpointRequiredBinding(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HttpEndpointRequiredBinding", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: Schema object {0} not supported.</summary>
        /// <param name="param0">Parameter 0 for string: Schema object {0} not supported.</param>
        internal static string HelpExampleGeneratorSchemaObjectNotSupported(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpExampleGeneratorSchemaObjectNotSupported", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {0} body is empty.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} body is empty.</param>
        internal static string HelpPageBodyIsEmpty(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageBodyIsEmpty", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {0} body is an Atom 1.0 syndication entry. See http://tools.ietf.org/html/rfc4287 for more details.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} body is an Atom 1.0 syndication entry. See http://tools.ietf.org/html/rfc4287 for more details.</param>
        internal static string HelpPageIsAtom10Entry(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageIsAtom10Entry", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {0} body is an Atom 1.0 syndication feed. See http://tools.ietf.org/html/rfc4287 for more details.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} body is an Atom 1.0 syndication feed. See http://tools.ietf.org/html/rfc4287 for more details.</param>
        internal static string HelpPageIsAtom10Feed(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageIsAtom10Feed", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {0} body is an Atom Pub categories document. See http://www.rfc-editor.org/rfc/rfc5023.txt for more details.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} body is an Atom Pub categories document. See http://www.rfc-editor.org/rfc/rfc5023.txt for more details.</param>
        internal static string HelpPageIsAtomPubCategoriesDocument(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageIsAtomPubCategoriesDocument", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {0} body is an Atom Pub service document. See http://www.rfc-editor.org/rfc/rfc5023.txt for more details.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} body is an Atom Pub service document. See http://www.rfc-editor.org/rfc/rfc5023.txt for more details.</param>
        internal static string HelpPageIsAtomPubServiceDocument(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageIsAtomPubServiceDocument", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {0} body is an RSS 2.0 syndication feed. See http://validator.w3.org/feed/docs/rss2.html for more details.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} body is an RSS 2.0 syndication feed. See http://validator.w3.org/feed/docs/rss2.html for more details.</param>
        internal static string HelpPageIsRSS20Feed(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageIsRSS20Feed", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {0} body is a byte stream.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} body is a byte stream.</param>
        internal static string HelpPageIsStream(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageIsStream", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {0} body is arbitrary XML.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} body is arbitrary XML.</param>
        internal static string HelpPageIsXML(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageIsXML", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {0} body is a syndication feed.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} body is a syndication feed.</param>
        internal static string HelpPageIsSyndication(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageIsSyndication", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The {0} body cannot be inferred.</summary>
        /// <param name="param0">Parameter 0 for string: The {0} body cannot be inferred.</param>
        internal static string HelpPageIsMessage(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageIsMessage", Culture), param0);
        }
        
        /// <summary>Gets localized string like: <p>Method not allowed. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service.</p></summary>
        /// <param name="param0">Parameter 0 for string: <p>Method not allowed. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service.</p></param>
        internal static string HelpPageMethodNotAllowedWithLink(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageMethodNotAllowedWithLink", Culture), param0);
        }
        
        /// <summary>Gets localized string like: <p>Endpoint not found. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service.</p></summary>
        /// <param name="param0">Parameter 0 for string: <p>Endpoint not found. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service.</p></param>
        internal static string HelpPageEndpointNotFoundWithLink(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageEndpointNotFoundWithLink", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The server encountered an error processing the request. The exception message is '{0}'. See server logs for more details. The exception stack trace is: </summary>
        /// <param name="param0">Parameter 0 for string: The server encountered an error processing the request. The exception message is '{0}'. See server logs for more details. The exception stack trace is: </param>
        internal static string HelpServerErrorProcessingRequestWithDetails(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpServerErrorProcessingRequestWithDetails", Culture), param0);
        }
        
        /// <summary>Gets localized string like: <p>The server encountered an error processing the request. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service.</p></summary>
        /// <param name="param0">Parameter 0 for string: <p>The server encountered an error processing the request. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service.</p></param>
        internal static string HelpServerErrorProcessingRequestWithLink(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpServerErrorProcessingRequestWithLink", Culture), param0);
        }
        
        /// <summary>Gets localized string like: <p>The server encountered an error processing the request. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service. The exception message is '{1}'. See server logs for more details. The exception stack trace is: </p></summary>
        /// <param name="param0">Parameter 0 for string: <p>The server encountered an error processing the request. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service. The exception message is '{1}'. See server logs for more details. The exception stack trace is: </p></param>
        /// <param name="param1">Parameter 1 for string: <p>The server encountered an error processing the request. Please see the <a rel="help-page" href="{0}">service help page</a> for constructing valid requests to the service. The exception message is '{1}'. See server logs for more details. The exception stack trace is: </p></param>
        internal static string HelpServerErrorProcessingRequestWithDetailsAndLink(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HelpServerErrorProcessingRequestWithDetailsAndLink", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: <p>There is no operation listening for <a href="{0}">{0}</a>, but there is an operation listening for <a href="{1}">{1}</a>, so you are being redirected there.</p></summary>
        /// <param name="param0">Parameter 0 for string: <p>There is no operation listening for <a href="{0}">{0}</a>, but there is an operation listening for <a href="{1}">{1}</a>, so you are being redirected there.</p></param>
        /// <param name="param1">Parameter 1 for string: <p>There is no operation listening for <a href="{0}">{0}</a>, but there is an operation listening for <a href="{1}">{1}</a>, so you are being redirected there.</p></param>
        internal static string HelpPageRedirect(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageRedirect", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: <p xmlns="http://www.w3.org/1999/xhtml">This operation supports JSONP responses. The callback function can be specified using the <b>"<span class="javascript-callback">{0}</span>"</b> Url query parameter.</p></summary>
        /// <param name="param0">Parameter 0 for string: <p xmlns="http://www.w3.org/1999/xhtml">This operation supports JSONP responses. The callback function can be specified using the <b>"<span class="javascript-callback">{0}</span>"</b> Url query parameter.</p></param>
        internal static string HelpPageCallbackText(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageCallbackText", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Handler for type {0} not found.</summary>
        /// <param name="param0">Parameter 0 for string: Handler for type {0} not found.</param>
        internal static string HelpExampleGeneratorHandlerNotFound(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpExampleGeneratorHandlerNotFound", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Max depth level reached at {0}.</summary>
        /// <param name="param0">Parameter 0 for string: Max depth level reached at {0}.</param>
        internal static string HelpExampleGeneratorMaxDepthLevelReached(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpExampleGeneratorMaxDepthLevelReached", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Valid elements of type: {0}</summary>
        /// <param name="param0">Parameter 0 for string: Valid elements of type: {0}</param>
        internal static string HelpPageValidElementOfType(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageValidElementOfType", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Operations at {0}</summary>
        /// <param name="param0">Parameter 0 for string: Operations at {0}</param>
        internal static string HelpPageOperationsAt(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageOperationsAt", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Reference for  {0}</summary>
        /// <param name="param0">Parameter 0 for string: Reference for  {0}</param>
        internal static string HelpPageReferenceFor(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageReferenceFor", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Service at {0}</summary>
        /// <param name="param0">Parameter 0 for string: Service at {0}</param>
        internal static string HelpPageDefaultDescription(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageDefaultDescription", Culture), param0);
        }
        
        /// <summary>Gets localized string like: <p  xmlns="http://www.w3.org/1999/xhtml"><b>HTTP Method: </b><span class="method">{0}</span></p></summary>
        /// <param name="param0">Parameter 0 for string: <p  xmlns="http://www.w3.org/1999/xhtml"><b>HTTP Method: </b><span class="method">{0}</span></p></param>
        internal static string HelpPageOperationMethod(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageOperationMethod", Culture), param0);
        }
        
        /// <summary>Gets localized string like: <p  xmlns="http://www.w3.org/1999/xhtml"><b>Url: </b><span class="uri-template">{0}</span></p></summary>
        /// <param name="param0">Parameter 0 for string: <p  xmlns="http://www.w3.org/1999/xhtml"><b>Url: </b><span class="uri-template">{0}</span></p></param>
        internal static string HelpPageOperationUri(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageOperationUri", Culture), param0);
        }
        
        /// <summary>Gets localized string like: Cannot infer schema. The {0} body is wrapped.</summary>
        /// <param name="param0">Parameter 0 for string: Cannot infer schema. The {0} body is wrapped.</param>
        internal static string HelpPageBodyIsWrapped(object param0) {
            return string.Format(Culture, ResourceManager.GetString("HelpPageBodyIsWrapped", Culture), param0);
        }
        
        /// <summary>Gets localized string like: A property required for completing the processing of this '{0}' is missing. The property with key '{1}' cannot be removed from an incoming '{0}' request.</summary>
        /// <param name="param0">Parameter 0 for string: A property required for completing the processing of this '{0}' is missing. The property with key '{1}' cannot be removed from an incoming '{0}' request.</param>
        /// <param name="param1">Parameter 1 for string: A property required for completing the processing of this '{0}' is missing. The property with key '{1}' cannot be removed from an incoming '{0}' request.</param>
        internal static string HttpMessageHandlerMissingProperty(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageHandlerMissingProperty", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: '{0}' cannot return a null '{1}' instance. Please ensure that '{0}' returns a valid '{1}' instance.</summary>
        /// <param name="param0">Parameter 0 for string: '{0}' cannot return a null '{1}' instance. Please ensure that '{0}' returns a valid '{1}' instance.</param>
        /// <param name="param1">Parameter 1 for string: '{0}' cannot return a null '{1}' instance. Please ensure that '{0}' returns a valid '{1}' instance.</param>
        internal static string HttpMessageHandlerChannelFactoryNullPipeline(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageHandlerChannelFactoryNullPipeline", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: '{0}' did not receive a '{1}' reply containing a '{2}' instance. Please ensure that replies contain a '{2}' instance.</summary>
        /// <param name="param0">Parameter 0 for string: '{0}' did not receive a '{1}' reply containing a '{2}' instance. Please ensure that replies contain a '{2}' instance.</param>
        /// <param name="param1">Parameter 1 for string: '{0}' did not receive a '{1}' reply containing a '{2}' instance. Please ensure that replies contain a '{2}' instance.</param>
        /// <param name="param2">Parameter 2 for string: '{0}' did not receive a '{1}' reply containing a '{2}' instance. Please ensure that replies contain a '{2}' instance.</param>
        internal static string HttpMessageHandlerChannelInvalidResponse(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("HttpMessageHandlerChannelInvalidResponse", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: The '{0}' type cannot accept a null value for the value type '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' type cannot accept a null value for the value type '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: The '{0}' type cannot accept a null value for the value type '{1}'.</param>
        internal static string CannotUseNullValueType(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("CannotUseNullValueType", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: A null '{0}' is not valid.</summary>
        /// <param name="param0">Parameter 0 for string: A null '{0}' is not valid.</param>
        internal static string CannotHaveNullInList(object param0) {
            return string.Format(Culture, ResourceManager.GetString("CannotHaveNullInList", Culture), param0);
        }
        
        /// <summary>Gets localized string like: The type '{0}' cannot be used as the type parameter for '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: The type '{0}' cannot be used as the type parameter for '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: The type '{0}' cannot be used as the type parameter for '{1}'.</param>
        internal static string CannotUseThisParameterType(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("CannotUseThisParameterType", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: An object of type '{0}' cannot be used with a type parameter of '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: An object of type '{0}' cannot be used with a type parameter of '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: An object of type '{0}' cannot be used with a type parameter of '{1}'.</param>
        internal static string ObjectAndTypeDisagree(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("ObjectAndTypeDisagree", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The media type string '{0}' is not a legal '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: The media type string '{0}' is not a legal '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: The media type string '{0}' is not a legal '{1}'.</param>
        internal static string InvalidMediaType(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("InvalidMediaType", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: No '{0}' is available to read an object of type '{1}' with the media type '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: No '{0}' is available to read an object of type '{1}' with the media type '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: No '{0}' is available to read an object of type '{1}' with the media type '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: No '{0}' is available to read an object of type '{1}' with the media type '{2}'.</param>
        internal static string NoReadSerializerAvailable(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("NoReadSerializerAvailable", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: No '{0}' is available to write an object of type '{1}' with the media type '{2}'.</summary>
        /// <param name="param0">Parameter 0 for string: No '{0}' is available to write an object of type '{1}' with the media type '{2}'.</param>
        /// <param name="param1">Parameter 1 for string: No '{0}' is available to write an object of type '{1}' with the media type '{2}'.</param>
        /// <param name="param2">Parameter 2 for string: No '{0}' is available to write an object of type '{1}' with the media type '{2}'.</param>
        internal static string NoWriteSerializerAvailable(object param0, object param1, object param2) {
            return string.Format(Culture, ResourceManager.GetString("NoWriteSerializerAvailable", Culture), param0, param1, param2);
        }
        
        /// <summary>Gets localized string like: '{0}' must be set before '{1}' can serialize its content.</summary>
        /// <param name="param0">Parameter 0 for string: '{0}' must be set before '{1}' can serialize its content.</param>
        /// <param name="param1">Parameter 1 for string: '{0}' must be set before '{1}' can serialize its content.</param>
        internal static string MediaTypeMustBeSetBeforeWrite(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("MediaTypeMustBeSetBeforeWrite", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The '{0}' serializer cannot serialize the type '{1}'.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' serializer cannot serialize the type '{1}'.</param>
        /// <param name="param1">Parameter 1 for string: The '{0}' serializer cannot serialize the type '{1}'.</param>
        internal static string SerializerCannotSerializeType(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("SerializerCannotSerializeType", Culture), param0, param1);
        }
        
        /// <summary>Gets localized string like: The '{0}' of '{1}' cannot be used as a supported media type because it is a media range.</summary>
        /// <param name="param0">Parameter 0 for string: The '{0}' of '{1}' cannot be used as a supported media type because it is a media range.</param>
        /// <param name="param1">Parameter 1 for string: The '{0}' of '{1}' cannot be used as a supported media type because it is a media range.</param>
        internal static string CannotUseMediaRangeForSupportedMediaType(object param0, object param1) {
            return string.Format(Culture, ResourceManager.GetString("CannotUseMediaRangeForSupportedMediaType", Culture), param0, param1);
        }
    }
}

